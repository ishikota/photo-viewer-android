import org.apache.commons.codec.binary.Base64

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def stringLiteral(String s) {
    if (s == null) {
        return "null"
    } else {
        def encoded = Base64.encodeBase64(s.getBytes())
        return "new String(android.util.Base64.decode(new byte[]{${encoded.toList().join(",")}}, android.util.Base64.DEFAULT)) /* ${s} */"
    }
}

def secretPropertiesFile = rootProject.file("secret.properties")
def secretProperties = new Properties()
secretProperties.load(new FileInputStream(secretPropertiesFile))

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.ishikota.photoviewerandroid"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Define static constants for app
        buildConfigField "String", "APP_ACCESS_KEY",
                stringLiteral(secretProperties['accesskey'])
        buildConfigField "String", "APP_SECRET_KEY",
                stringLiteral(secretProperties['secretkey'])
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.core:core-ktx:$coreVersionn"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"

    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:$flipperVersion"
    debugImplementation "com.facebook.soloader:soloader:$soloaderVersion"
    releaseImplementation "com.facebook.flipper:flipper-noop:$flipperVersion"

    testImplementation "androidx.test:core:$testCoreVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    androidTestImplementation "androidx.test.ext:junit:$textExtVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}
